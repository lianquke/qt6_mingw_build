name: build Task

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]

jobs:
  versions_config:
    name: Config libraries and build
    runs-on: ubuntu-latest
    outputs:      
      llvm-version-version: ${{ steps.get-versions.outputs.llvm-version }}
      llvm-link-prefix-version: ${{ steps.get-versions.outputs.llvm-link-prefix }}
      mingw-version-version: ${{ steps.get-versions.outputs.mingw-version }}
      mingw-link-prefix-version: ${{ steps.get-versions.outputs.mingw-link-prefix }}
      openssl-version-version: ${{ steps.get-versions.outputs.openssl-version }}
      openssl-link-prefix-version: ${{ steps.get-versions.outputs.openssl-link-prefix }}
      qt-version-version: ${{ steps.get-versions.outputs.qt-version }}
      mysql-version-version: ${{ steps.get-versions.outputs.mysql-version }}
      mysql-link-prefix-version: ${{ steps.get-versions.outputs.mysql-link-prefix }}
      vulkan-version-version: ${{ steps.get-versions.outputs.vulkan-version }}
      vulkan-link-prefix-version: ${{ steps.get-versions.outputs.vulkan-link-prefix }}
      install-prefix-version: ${{ steps.get-versions.outputs.install-prefix }}

      # cmake-version: ${{ steps.get-versions.outputs.cmake-version }}
      build-date: ${{ steps.date.outputs.build-date }}
    steps:
      - name: generate library version files
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: generate version files
        run: |
          python3 ./utils/libraries_version.py
          ls -l versions
          
      - name: get versions
        id: get-versions
        run: |
          echo "llvm-version=$(cat versions/llvm)" >> $GITHUB_OUTPUT
          echo "llvm-link-prefix=$(cat versions/llvm_link_prefix)" >> $GITHUB_OUTPUT
          echo "mingw-version=$(cat versions/mingw)" >> $GITHUB_OUTPUT
          echo "mingw-link-prefix=$(cat versions/mingw_link_prefix)" >> $GITHUB_OUTPUT
          echo "openssl-version=$(cat versions/openssl)" >> $GITHUB_OUTPUT
          echo "openssl-link-prefix=$(cat versions/openssl_link_prefix)" >> $GITHUB_OUTPUT
          echo "qt-version=$(cat versions/qt)" >> $GITHUB_OUTPUT
          echo "mysql-version=$(cat versions/mysql)" >> $GITHUB_OUTPUT
          echo "mysql-link-prefix=$(cat versions/mysql_link_prefix)" >> $GITHUB_OUTPUT
          echo "vulkan-version=$(cat versions/vulkan)" >> $GITHUB_OUTPUT
          echo "vulkan-link-prefix=$(cat versions/vulkan_link_prefix)" >> $GITHUB_OUTPUT
          echo "install-prefix=$(cat versions/install_prefix)" >> $GITHUB_OUTPUT
          

      - name: get build date      
        id: date        
        run: |  
           echo "build-date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  check-versions:
    name: Check versions
    runs-on: ubuntu-latest
    needs: versions_config
    steps:
      - name: show library versions
        run: |
          echo "llvm-version=${{ needs.versions_config.outputs.llvm-version }}"
          echo "llvm-link-prefix=${{ needs.versions_config.outputs.llvm-link-prefix }}"
          echo "mingw-version=${{ needs.versions_config.outputs.mingw-version }}"
          echo "mingw-link-prefix=${{ needs.versions_config.outputs.mingw-link-prefix }}"
          echo "openssl-version=${{ needs.versions_config.outputs.openssl-version }}"
          echo "openssl-link-prefix=${{ needs.versions_config.outputs.openssl-link-prefix }}"
          echo "qt-version=${{ needs.versions_config.outputs.qt-version }}"
          echo "mysql-version=${{ needs.versions_config.outputs.mysql-version }}"
          echo "mysql-link-prefix=${{ needs.versions_config.outputs.mysql-link-prefix }}"
          echo "vulkan-version=${{ needs.versions_config.outputs.vulkan-version }}"
          echo "vulkan-link-prefix=${{ needs.versions_config.outputs.vulkan-link-prefix }}"
          echo "install-prefix=${{ needs.versions_config.outputs.install-prefix }}"
          
          # echo "cmake=${{ needs.versions_config.outputs.cmake-version }}"
          echo "build-date=${{ needs.versions_config.outputs.build-date }}"



  # build-openssl:
  #   name: build openssl
  #   needs:
  #     - versions_config
  #     - check-versions
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runs-on:
  #         - windows-2022

  #   uses: ./.github/workflows/build_openssl.yml
  #   with:
  #     openssl-version: ${{ needs.versions_config.outputs.openssl-version }}
  #     mingw: ${{ needs.versions_config.outputs.mingw-version }}
  #     install-prefix: ${{ needs.versions_config.outputs.install-prefix }}
  #     build-date: ${{ needs.versions_config.outputs.build-date }}
  #     qt-version: ${{ needs.versions_config.outputs.qt-version }}
  #     upload: true
  #     runs-on: ${{ matrix.runs-on }}

  # build-libclang:
  #   name: build libclang
  #   needs:
  #     - versions_config
  #     - check-versions
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runs-on:
  #         - windows-2022     
  #   uses: ./.github/workflows/build_libclang.yml
  #   with:
  #     llvm-version: ${{ needs.versions_config.outputs.llvm-version }}
  #     mingw: ${{ needs.versions_config.outputs.mingw-version }}
  #     install-prefix: ${{ needs.versions_config.outputs.install-prefix }}
  #     build-date: ${{ needs.versions_config.outputs.build-date }}
  #     upload: true
  #     runs-on: ${{ matrix.runs-on }}    

  